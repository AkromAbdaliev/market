/**
 *
 *  ProductCategories.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ProductCategories.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::market;

const std::string ProductCategories::Cols::_product_id = "\"product_id\"";
const std::string ProductCategories::Cols::_category_id = "\"category_id\"";
const std::vector<std::string> ProductCategories::primaryKeyName = {"product_id","category_id"};
const bool ProductCategories::hasPrimaryKey = true;
const std::string ProductCategories::tableName = "\"product_categories\"";

const std::vector<typename ProductCategories::MetaData> ProductCategories::metaData_={
{"product_id","int32_t","integer",4,0,1,1},
{"category_id","int32_t","integer",4,0,1,1}
};
const std::string &ProductCategories::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ProductCategories::ProductCategories(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["product_id"].isNull())
        {
            productId_=std::make_shared<int32_t>(r["product_id"].as<int32_t>());
        }
        if(!r["category_id"].isNull())
        {
            categoryId_=std::make_shared<int32_t>(r["category_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            productId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            categoryId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

ProductCategories::ProductCategories(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            categoryId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

ProductCategories::ProductCategories(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("category_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["category_id"].isNull())
        {
            categoryId_=std::make_shared<int32_t>((int32_t)pJson["category_id"].asInt64());
        }
    }
}

void ProductCategories::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            categoryId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

void ProductCategories::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("product_id"))
    {
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson["product_id"].asInt64());
        }
    }
    if(pJson.isMember("category_id"))
    {
        if(!pJson["category_id"].isNull())
        {
            categoryId_=std::make_shared<int32_t>((int32_t)pJson["category_id"].asInt64());
        }
    }
}

const int32_t &ProductCategories::getValueOfProductId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ProductCategories::getProductId() const noexcept
{
    return productId_;
}
void ProductCategories::setProductId(const int32_t &pProductId) noexcept
{
    productId_ = std::make_shared<int32_t>(pProductId);
    dirtyFlag_[0] = true;
}

const int32_t &ProductCategories::getValueOfCategoryId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(categoryId_)
        return *categoryId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ProductCategories::getCategoryId() const noexcept
{
    return categoryId_;
}
void ProductCategories::setCategoryId(const int32_t &pCategoryId) noexcept
{
    categoryId_ = std::make_shared<int32_t>(pCategoryId);
    dirtyFlag_[1] = true;
}

void ProductCategories::updateId(const uint64_t id)
{
}
typename ProductCategories::PrimaryKeyType ProductCategories::getPrimaryKey() const
{
    return std::make_tuple(*productId_,*categoryId_);
}

const std::vector<std::string> &ProductCategories::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "product_id",
        "category_id"
    };
    return inCols;
}

void ProductCategories::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCategoryId())
        {
            binder << getValueOfCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ProductCategories::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void ProductCategories::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCategoryId())
        {
            binder << getValueOfCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ProductCategories::toJson() const
{
    Json::Value ret;
    if(getProductId())
    {
        ret["product_id"]=getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    return ret;
}

std::string ProductCategories::toString() const
{
    return toJson().toStyledString();
}

Json::Value ProductCategories::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getProductId())
            {
                ret[pMasqueradingVector[0]]=getValueOfProductId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCategoryId())
            {
                ret[pMasqueradingVector[1]]=getValueOfCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getProductId())
    {
        ret["product_id"]=getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    return ret;
}

bool ProductCategories::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(0, "product_id", pJson["product_id"], err, true))
            return false;
    }
    else
    {
        err="The product_id column cannot be null";
        return false;
    }
    if(pJson.isMember("category_id"))
    {
        if(!validJsonOfField(1, "category_id", pJson["category_id"], err, true))
            return false;
    }
    else
    {
        err="The category_id column cannot be null";
        return false;
    }
    return true;
}
bool ProductCategories::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProductCategories::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(0, "product_id", pJson["product_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("category_id"))
    {
        if(!validJsonOfField(1, "category_id", pJson["category_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool ProductCategories::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProductCategories::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
